AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ordersapi

  Sample SAM Template for ordersapi
Globals:
  Function:
    Runtime: java17
    Architectures:
        - x86_64
    MemorySize: 512
    Timeout: 30
    Environment: 
      Variables:
        ORDERS_TABLE: !Ref OrdersTable
        REGION: !Ref AWS::Region  

Resources:
  OrdersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: OrdersTable
      PrimaryKey:
        Name: id
        Type: Number
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "s3upload-lambda-bucket"
  CreateOrderBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
  S3ReadOrderSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ReadFromS3PublishToSNS 
  DebugQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ordersapi-sns-debug-${AWS::AccountId}-${AWS::Region}"
  DebugQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DebugQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSNSToSend
            Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt DebugQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref S3ReadOrderSNS   # allow this topic to send

  DebugSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref S3ReadOrderSNS
      Protocol: sqs
      Endpoint: !GetAtt DebugQueue.Arn
      RawMessageDelivery: true  # see exact body without SNS envelope
      

  CreateOrderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ordersapi
      Handler: com.rearc.quest.lambda.api.OrderCreateHandler::handleRequest     
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - S3WritePolicy:
            BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
        - SNSPublishMessagePolicy:
            # This policy expects the topic *name*, not ARN
            TopicName: !GetAtt S3ReadOrderSNS.TopicName
      Environment: 
        Variables:
          BUCKET_NAME: !Ref CreateOrderBucket
      Events:
        OrderEvents:
          Type: Api
          Properties:
            Path: /orders
            Method: POST
            
  ReadOrderFromS3PubToSNSFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ordersapi
      Handler: com.rearc.quest.lambda.api.ReadOrderFromS3PubToSNSLambda::handleRequest   
      Policies: 
        - S3ReadPolicy:
            BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region} 
        - Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref S3ReadOrderSNS   # Ref on SNS::Topic is the ARN 
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref S3ReadOrderSNS
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref CreateOrderBucket
            Events: s3:ObjectCreated:*


  ReadOrderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ordersapi
      Handler: com.rearc.quest.lambda.api.ReadOrderLambda::readOrder
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Events:
        OrderEvents:
          Type: Api
          Properties:
            Path: /orders
            Method: GET
  S3UploadFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ordersapi
      Handler: com.rearc.quest.lambda.api.S3UploadLambda::uploadBlsGovPopulationFilesToS3
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject      # Allows reading file content & metadata
                - s3:PutObject      # Allows writing files to the folder
                - s3:DeleteObject
              Resource: !Sub "${MyS3Bucket.Arn}/bls-gov-datausa/*"
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket      # Required for listObjectsV2 or list calls
              Resource: !GetAtt MyS3Bucket.Arn
              Condition:
                StringLike:
                  s3:prefix: "bls-gov-datausa/*"
      
      Environment: 
        Variables:
          BUCKET_NAME: !Ref MyS3Bucket
          FOLDER_NAME: bls-gov-datausa/
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            # Read more about schedule expressions here: 
            # https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html
            # This event runs every Friday at 16 UTC/9AM PST
            Schedule: cron(0 18 ? * SUN *)
        S3UploadEvents:
          Type: Api
          Properties:
            Path: /s3upload
            Method: GET


Outputs:
  OrdersAPI:
    Description: "API Gateway URL to access OrdersAPI"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders"
  CreateOrderFunctionARN:
    Description: "Create Order Lambda Function ARN"
    Value: !GetAtt CreateOrderFunction.Arn
  CreateOrderFunctionIAMRole: 
    Description: "Create Order Lambda Function IAM Role ARN"
    Value: !GetAtt CreateOrderFunctionRole.Arn
  S3UploadAPI:
    Description: "API Gateway URL to access S3UploadAPI"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/s3upload"
  S3UploadFunctionARN:
    Description: "S3Upload Lambda Function ARN"
    Value: !GetAtt S3UploadFunction.Arn
  S3UploadFunctionIAMRole: 
    Description: "S3Upload Lambda Function IAM Role ARN"
    Value: !GetAtt S3UploadFunctionRole.Arn
  DebugQueueUrl:
    Description: "URL of the SQS queue receiving SNS messages"
    Value: !Ref DebugQueue
  
  
  

      
